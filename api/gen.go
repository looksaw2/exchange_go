// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// AuthRequest defines model for AuthRequest.
type AuthRequest struct {
	Name     string `json:"name"`
	Password string `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	Token  *string `json:"token,omitempty"`
	UserId *string `json:"userId,omitempty"`
}

// PostV1ApiAuthLoginJSONRequestBody defines body for PostV1ApiAuthLogin for application/json ContentType.
type PostV1ApiAuthLoginJSONRequestBody = AuthRequest

// PostV1ApiAuthRegisterJSONRequestBody defines body for PostV1ApiAuthRegister for application/json ContentType.
type PostV1ApiAuthRegisterJSONRequestBody = AuthRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// User login
	// (POST /v1/api/auth/login)
	PostV1ApiAuthLogin(c *gin.Context)
	// User register
	// (POST /v1/api/auth/register)
	PostV1ApiAuthRegister(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostV1ApiAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostV1ApiAuthLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1ApiAuthLogin(c)
}

// PostV1ApiAuthRegister operation middleware
func (siw *ServerInterfaceWrapper) PostV1ApiAuthRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV1ApiAuthRegister(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/api/auth/login", wrapper.PostV1ApiAuthLogin)
	router.POST(options.BaseURL+"/v1/api/auth/register", wrapper.PostV1ApiAuthRegister)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xSS0/bQBD+K9a0R8sPAqj1jXKoHKEWRQVVqjgsziReYu8uO2NIivLfq1kn5GFU9VBV",
	"Pdm7O4/v9QKVbZ01aJigeAGqamxV+L3ouJ7gY4fEcnTeOvSsMTwa1aJ8cala1yAU0Fi7IPUMMbRqeYVm",
	"zjUUoyyGVpvXYwy8clJN7LWZwzoGp4ierZ8eTstPRqdn5xDDzPpWMRS7ut8t+DBYsI7B42OnPU6h+NHj",
	"3lt699pg7x+wYkHUEydnDeGQOdsFmkOwuBrX958r/VWPy5ufZf5Fl1SayVl1WZ6XC/f99nL8MUkSeIN9",
	"R+jLIXd4i8cRULnSZmaleYpUee1YWwMFqI7r6OK6lCmaw8xvtaZIU8Q1RnvPT+ip78mTLMkEkXVolNNQ",
	"wCjJklEQi+tAPX3KU+V0KgPSxs510MHZPiAikhIEwgeuLfFtfuG0qHkVansnkPiTna6ko7KG0YRm5Vyj",
	"q9CePpA1uyzK33uPMyjgXboLa7pJarof0/Wh3ew7DBe9l4HDSZb95dWboITdhz4EiSKquqpCIhH3NMuH",
	"dkkGJJcReh9ZH23DKedgPHVtq/wKCrgh9FGzUZPVnCTTAgPupPDAII9zTYz+Dz2abMv/E5vyf2bTlvmR",
	"U9nQqSC/ajyq6SrCpQ5cBv74nZLHFq3XvwIAAP//zdhdkHEFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
