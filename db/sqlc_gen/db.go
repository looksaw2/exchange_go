// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc_gen

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createArticleStmt, err = db.PrepareContext(ctx, createArticle); err != nil {
		return nil, fmt.Errorf("error preparing query CreateArticle: %w", err)
	}
	if q.createExchangeRateStmt, err = db.PrepareContext(ctx, createExchangeRate); err != nil {
		return nil, fmt.Errorf("error preparing query CreateExchangeRate: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.deleteARticleStmt, err = db.PrepareContext(ctx, deleteARticle); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteARticle: %w", err)
	}
	if q.deleteUserByIDStmt, err = db.PrepareContext(ctx, deleteUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByID: %w", err)
	}
	if q.deleteUserByNameStmt, err = db.PrepareContext(ctx, deleteUserByName); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUserByName: %w", err)
	}
	if q.getArticleByIDStmt, err = db.PrepareContext(ctx, getArticleByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleByID: %w", err)
	}
	if q.getArticleListStmt, err = db.PrepareContext(ctx, getArticleList); err != nil {
		return nil, fmt.Errorf("error preparing query GetArticleList: %w", err)
	}
	if q.getExchangeRateByIDStmt, err = db.PrepareContext(ctx, getExchangeRateByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetExchangeRateByID: %w", err)
	}
	if q.getExchangeRateListStmt, err = db.PrepareContext(ctx, getExchangeRateList); err != nil {
		return nil, fmt.Errorf("error preparing query GetExchangeRateList: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByNameStmt, err = db.PrepareContext(ctx, getUserByName); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByName: %w", err)
	}
	if q.getUserListStmt, err = db.PrepareContext(ctx, getUserList); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserList: %w", err)
	}
	if q.getUserWithRangeStmt, err = db.PrepareContext(ctx, getUserWithRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserWithRange: %w", err)
	}
	if q.updateArticleStmt, err = db.PrepareContext(ctx, updateArticle); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateArticle: %w", err)
	}
	if q.updateUserByIdStmt, err = db.PrepareContext(ctx, updateUserById); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserById: %w", err)
	}
	if q.updateUserByNameStmt, err = db.PrepareContext(ctx, updateUserByName); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUserByName: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createArticleStmt != nil {
		if cerr := q.createArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createArticleStmt: %w", cerr)
		}
	}
	if q.createExchangeRateStmt != nil {
		if cerr := q.createExchangeRateStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createExchangeRateStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.deleteARticleStmt != nil {
		if cerr := q.deleteARticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteARticleStmt: %w", cerr)
		}
	}
	if q.deleteUserByIDStmt != nil {
		if cerr := q.deleteUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByIDStmt: %w", cerr)
		}
	}
	if q.deleteUserByNameStmt != nil {
		if cerr := q.deleteUserByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserByNameStmt: %w", cerr)
		}
	}
	if q.getArticleByIDStmt != nil {
		if cerr := q.getArticleByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleByIDStmt: %w", cerr)
		}
	}
	if q.getArticleListStmt != nil {
		if cerr := q.getArticleListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getArticleListStmt: %w", cerr)
		}
	}
	if q.getExchangeRateByIDStmt != nil {
		if cerr := q.getExchangeRateByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExchangeRateByIDStmt: %w", cerr)
		}
	}
	if q.getExchangeRateListStmt != nil {
		if cerr := q.getExchangeRateListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getExchangeRateListStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByNameStmt != nil {
		if cerr := q.getUserByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByNameStmt: %w", cerr)
		}
	}
	if q.getUserListStmt != nil {
		if cerr := q.getUserListStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserListStmt: %w", cerr)
		}
	}
	if q.getUserWithRangeStmt != nil {
		if cerr := q.getUserWithRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserWithRangeStmt: %w", cerr)
		}
	}
	if q.updateArticleStmt != nil {
		if cerr := q.updateArticleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateArticleStmt: %w", cerr)
		}
	}
	if q.updateUserByIdStmt != nil {
		if cerr := q.updateUserByIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserByIdStmt: %w", cerr)
		}
	}
	if q.updateUserByNameStmt != nil {
		if cerr := q.updateUserByNameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserByNameStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	createArticleStmt       *sql.Stmt
	createExchangeRateStmt  *sql.Stmt
	createUserStmt          *sql.Stmt
	deleteARticleStmt       *sql.Stmt
	deleteUserByIDStmt      *sql.Stmt
	deleteUserByNameStmt    *sql.Stmt
	getArticleByIDStmt      *sql.Stmt
	getArticleListStmt      *sql.Stmt
	getExchangeRateByIDStmt *sql.Stmt
	getExchangeRateListStmt *sql.Stmt
	getUserByIDStmt         *sql.Stmt
	getUserByNameStmt       *sql.Stmt
	getUserListStmt         *sql.Stmt
	getUserWithRangeStmt    *sql.Stmt
	updateArticleStmt       *sql.Stmt
	updateUserByIdStmt      *sql.Stmt
	updateUserByNameStmt    *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		createArticleStmt:       q.createArticleStmt,
		createExchangeRateStmt:  q.createExchangeRateStmt,
		createUserStmt:          q.createUserStmt,
		deleteARticleStmt:       q.deleteARticleStmt,
		deleteUserByIDStmt:      q.deleteUserByIDStmt,
		deleteUserByNameStmt:    q.deleteUserByNameStmt,
		getArticleByIDStmt:      q.getArticleByIDStmt,
		getArticleListStmt:      q.getArticleListStmt,
		getExchangeRateByIDStmt: q.getExchangeRateByIDStmt,
		getExchangeRateListStmt: q.getExchangeRateListStmt,
		getUserByIDStmt:         q.getUserByIDStmt,
		getUserByNameStmt:       q.getUserByNameStmt,
		getUserListStmt:         q.getUserListStmt,
		getUserWithRangeStmt:    q.getUserWithRangeStmt,
		updateArticleStmt:       q.updateArticleStmt,
		updateUserByIdStmt:      q.updateUserByIdStmt,
		updateUserByNameStmt:    q.updateUserByNameStmt,
	}
}
